[
["index.html", "MSc Conversion in Psychological Studies/Science Overview 0.1 Intended Learning Outcomes", " MSc Conversion in Psychological Studies/Science Emily Nordmann 2019-06-12 Overview This book contains the materials for students on the MSc Conversion in Psychological Studies/Science. This course is a one-year postgraduate degree where students who already hold a non-psychology undergraduate degree receive a British Psychological Society accredited MSc. The students are typically a diverse cohort and range from those with no STEM or programming background to engineering and computing science graduates. Compared to the undergraduate degree, the students are older, and there is a greater incidence of computer anxiety. As a consequence of the intense nature of the programme and the diversity of the cohort, the approach to R is slightly different to that taken in the undergraduate programmes. The focus for the MSc is to provide a basic but solid competency in core data skills and statistics that can be built on in further study. Students who wish to push themselves beyond the core competencies are encouraged to consult the MSc Data Skills course where they can learn about e.g., simulation and custom functions. To support those students who may have very limited computer literacy, the beginning stages are more supported than in the undergraduate programme e.g., with an increased use of screenshots and explanations for terminiology. In this course you will learn core data skills that allow you to manipulate and analyse quantitative data, a key component of an accredited psychology programme. Each week we will build your skills through pre-class, in-class, and homework activities. In addition to this book, there are video walkthroughs of each in-class activity available on Moodle and there will be drop-in help sessions run by our Graduate Teaching Assistants. The ability to work with quantitative data is a key skill for psychologists and by using R as our tool we can also promote reproducible research practices. Although it may seem like writing a programming script is more time-consuming than other point-and-click software you may have used, this is not the case! Once you have a script you can easily re-run your analysis without having to go through each step again manually which is a) easier and b) less likely to result in errors if you do something slightly different or forget one of the steps. Crucially, with an analysis script other researchers can also see how you got from the raw data to the statistics you report in your final paper. Sharing analysis scripts online on sites such as the Open Science Framework is now seen as an important open science practice. Even if you don’t continue with quantitative research in the future, the skills you develop on this course will allow you to evaluate quantitative research and to understand what goes on behind the scenes with data before the conclusions are presented. 0.1 Intended Learning Outcomes By the end of this course students will be able to: Clean and wrangle data into appropriate forms for analysis Visualise data using a range of plots Conduct and interpret a core set of statistical tests (chi-square, t-test, correlation, ANOVA, regression) "],
["programming-basics.html", "Chapter 1 Programming Basics 1.1 R and RStudio 1.2 Functions and arguments 1.3 Base R and packages 1.4 Objects 1.5 Help and additional resources 1.6 Debugging tips 1.7 Test yourself", " Chapter 1 Programming Basics In this chapter we will go over some basic programming concepts and terminology, common pitfalls, helpful hints, and where to get help. Those of you who have no programming experience should find this chapter particularly helpful, however, even if you’ve used R before there may be some helpful hints and tips so please make sure you read through this chapter before Lab 1. We don’t expect you to memorise the information that is contained in this chapter and some sections of it will make more sense when you start writing your own code in Lab 1 - just make sure you know what help is available! 1.1 R and RStudio For this course, you need two different bits of software, R and RStudio. R is a programming language that you will write code in and RStudio is an Integrated Development Environment (IDE) which makes working with R easier. Think of it as knowing English and using a plain text editor like NotePad to write a book versus using a word processor like Microsoft Word. You could do it, but it wouldn’t look as good and it would be much harder without things like spell-checking and formatting. In a similar way, you can use R without RStudio but we wouldn’t reccommend it. The key thing to remember is that although you will do all of your work using RStudio for this course, you are actually using two pieces of software which means that from time-to-time, both of them may have separate updates. All of the University of Glasgow computers should already have R and RStudio installed, however, both are freely available so you may wish to install them on your own machine. 1.1.1 Getting to know RStudio RStudio has a console that you can try out code in (appearing as the bottom left window in Figure 1.1), there is a script editor (top left), a window showing functions and objects you have created in the “Environment” tab (top right window in the figure), and a window that shows plots, files packages, and help documentation (bottom right). Figure 1.1: RStudio interface You will learn more about how to use the features included in RStudio throughout this course, however, we highly reccommend watching RStudio Essentials 1 from the RStudio team. The video last ~30 minutes and gives a tour of the main parts of RStudio. 1.2 Functions and arguments Functions in R execute specific tasks and normally take a number of arguments (if you’re into linguistics you might want to think as these as verbs that require a subject and an object). You can look up all the arguments that a function takes by using the help documentation by using the format ?function. Some arguments are required, and some are optional. Optional arguments will often use a default (normally specified in the help documentation) if you do not enter any value. As an example, let’s look at the help documentation for the function rnorm() which randomly generates a set of numbers with a normal distribution. Open up RStudio and in the console, type the following code: ?rnorm The help documentation for rnorm() should appear in the bottom right help panel. In the usage section, we see that rnorm() takes the following form: rnorm(n, mean = 0, sd = 1) In the arguments section, there are explanations for each of the arguments. n is the number of observations we want to create, mean is the mean of the data points we will create and sd is the standard deviation of the set. In the details section it notes that if no values are entered for mean and sd it will use a default of 0 and 1 for these values. Because there is no default value for n it must be specified otherwise the code won’t run. Let’s try an example and just change the required argument n to ask R to produce 5 random numbers. Copy and paste the following code into the console. set.seed(12042016) rnorm(n = 5) ## [1] -0.2896163 -0.6428964 0.5829221 -0.3286728 -0.5110101 These numbers have a mean of 0 and an SD of 1. Now we can change the additional arguments to produce a different set of numbers. rnorm(n = 5, mean = 10, sd = 2) ## [1] 13.320853 9.377956 10.235461 9.811793 13.019102 This time R has still produced 5 random numbers, but now this set of numbers has a mean of 10 and an sd of 2 as specified. Always remember to use the help documentation to help you understand what arguments a function requires. If you’re looking up examples of code online, you may often see code that starts with the function set.seed(). This function controls the random number generator - if you’re using any functions that generate numbers randomly (such as rnorm()), running set.seed() will ensure that you get the same result (in some cases this may not be what you want to do). We call set.seed() in this example because it means that you will get the same random numbers as this book. 1.2.1 Argument names In the above examples, we have written out the argument names in our code (e.g., n, mean, sd), however, this is not strictly necessary. The following two lines of code will both produce the same result: rnorm(n = 6, mean = 3, sd = 1) rnorm(6, 3, 1) Importantly, if you do not write out the argument names, R will use the default order of arguments, that is for rnorm it will assume that the first number you enter is n. the second number is mean and the third number is sd. If you write out the argument names then you can write the arguments in whatever order you like: rnorm(sd = 1, n = 6, mean = 3) When you are first learning R, you may find it useful to write out the argument names as it can help you remember and understand what each part of the function is doing. However, as your skills progress you may find it quicker to omit the argument names and you will also see examples of code online that do not use argument names so it is important to be able to understand which argument each bit of code is referring to (or look up the help documentation to check). In this course, we will always write out the argument names the first time we use each function, however, in subsequent uses they may be omitted. 1.2.2 Tab auto-complete One very useful feature of RStudio is the tab auto-complete for functions (see Figure 1.2. If you write the name of the function and then press the tab key, RStudio will show you the arguments that function takes along with a brief description. If you press enter on the argument name it will fill in the name for you, just like auto-complete on your phone. This is incredibly useful when you are first learning R and you should remember to use this feature frequently. Figure 1.2: Tab auto-complete 1.3 Base R and packages When you install R you will have access to a range of functions including options for data wrangling and statistical analysis. The functions that are included in the default installation are typically referred to as Base R and there is a useful cheat sheet that shows many Base R functions here. However, the power of R is that it is extendable and open source - put simply, if a function doesn’t exist or doesn’t work very well, anyone can create a new package that contains data and code to allow you to perform new tasks. You may find it useful to think of Base R as the default apps that come on your phone and packages as additional apps that you need to download separately. 1.3.1 Installing and loading packages In order to use a package, you must first install it. The following code installs the package tidyverse, a package we will use very frequently in this course. install.packages(&quot;tidyverse&quot;) You only need to install a package once, however, each time you start R you need to load the packages you want to use, in a similar way that you need to install an app on your phone once, but you need to open it every time you want to use it. To load packages we use the function library(). Typically you would start any analysis script by loading all of the packages you need, but we will come back to that in Lab 1. library(tidyverse) Now that we’ve loaded the tidyverse package we can use any of the functions it contains but remember, you need to run the library() function every time you start R. All of the University of Glasgow computers will already have all of the packages you need for this course so you only need to install packages if you are using your own machine. Please do not install any new packages on the university machines. 1.3.2 Package updates In addition to updates to R and RStudio, the creators of packages also sometimes update their code. This can be to add functions to a package, or it can be to fix errors. One thing to avoid is unintentionally updating an installed package. When you run install.packages() it will always install the latest version of the package and it will overwrite any older versions you may have installed. Sometimes this isn’t a problem, however, sometimes you will find that the update means your code no longer works as the package has changed substantially. It is possible to revert back to an older version of a package but try to avoid this anyway. To avoid accidentally overwriting a package with a later version, you should never include install.packages() in your analysis scripts in case you, or someone else runs the code by mistake. Remember, the University of Glasgow computers will already have all of the packages you need for this course so you only need to install packages if you are using your own machine. 1.3.3 Package conflicts There are thousands of different R packages with even more functions. Unfortunately, sometimes different packages have the same function names. For example, the packages dplyr and MASS both have a function named select(). If you load both of these packages, R will produce a warning telling you that there is a conflict. library(dplyr) library(MASS) ## ## Attaching package: &#39;MASS&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## select In this case, R is telling you that the function select() in the dplyr is being hidden (or ‘masked’) by another function with the same name. If you were to try and use select(), R would use the function from the package that was loaded most recently - in this case it would use the function from MASS. If you want to specify which package you want to use for a particular function you can use code in the format package::function, for example: dplyr::select(...) MASS::select(...) 1.4 Objects A large part of your coding will involve creating and manipulating objects. Objects contain stuff. That stuff can be numbers, words, or the result of operations and analyses.You assign content to an object using &lt;-. Copy and paste the following code into the console and run it. You should see that name, age, today, new_year, and data appear in the environment pane. name &lt;- &quot;emily&quot; age &lt;- 15 + 18 today &lt;-Sys.Date() new_year &lt;- as.Date(&quot;2020-01-01&quot;) data &lt;- rnorm(n = 10, mean = 15, sd = 3) Figure 1.3: Objects in the environment Note that in these examples, name,age, and new_year would always contain the values emily, 33, and the date of New Year’s Day 2020, however, today will draw the date from the operating system and data will be a randomly generated set of data so the values of these objects will not be static. Importantly, objects can be involved in calculations and can interact with each other. For example: age + 10 new_year - today mean(data) ## [1] 43 ## Time difference of 203 days ## [1] 17.66644 Finally, you can store the result of these operations in a new object: decade &lt;- age + 10 You may find it helpful to read &lt;- as contains, e.g., name contains the text emily. You will constantly be creating objects throughout this course and you will learn more about them and how they behave as we go along, however, for now it is enough to understand that they are a way of saving values, that these values can numbers, text, or the result of operations, and that they can be used in further operations to create new variables. You may also see objects referred to as ‘variables’. There is a difference between the two in programming terms, however, they are used synonomously very frequently. 1.5 Help and additional resources Figure 1.4: The truth about programming Getting good at programming really means getting good trying stuff out, searching for help online, and finding examples of code to copy. If you are having difficulty with any of the exercises contained in this book then you can ask for help on Slack or Moodle, however, learning to problem-solve effectively is a key skill that you need to develop throughout this course. Use the help documentation. If you’re struggling to understand how a function works, remember the ?function command. If you get an error message, copy and paste it in to Google - it’s very likely someone else has had the same problem. In addition to these course materials there are a number of excellent resources for learning R: R Cookbook StackOverlow R for Data Science Search or use the #rstats hashtag on Twitter If you would like to push yourself further with R, we reccomend working through R for Data Science in full and/or the materials for the MSc Data Skills course run by Prof. Lisa DeBruine and Dr. Dale Barr at the University of Glasgow. 1.6 Debugging tips A large part of coding is trying to figure why your code doesn’t work and this is true whether you are a novice or an expert. As you progress through this course you should keep a record of mistakes you make and how you fixed them. In each chapter we will provide a number of common mistakes to look out for but you will undoubtedly make (and fix!) new mistakes yourself. Have you loaded the correct packages for the functions you are trying to use? One very common mistake is to write the code to load the package, e.g., library(tidyverse) but then forget to run it. Have you made a typo? Remember data is not the same as DATA and t.test is not the same as t_test. Is there a package conflict? Have you tried specifying the package and function with package::function? Is it definitely an error? Not all red text in R means an error - sometimes it is just giving you a message with information. 1.7 Test yourself Question 1. Why should you never include the code install.packages() in your analysis scripts? You should use library() instead Packages are already part of Base R You (or someone else) may accidentally install a package update that stops your code working You already have the latest version of the package Explain This Answer Remember, when you run install.packages() it will always install the latest version of the package and it will overwrite any older versions of the package you may have installed. Question 2.What will the following code produce? rnorm(6, 50, 10) A dataset with 10 numbers that has a mean of 6 and an SD of 50 A dataset with 6 numbers that has a mean of 50 and an SD of 10 A dataset with 50 numbers that has a mean of 10 and an SD of 6 A dataset with 50 numbers that has a mean of 10 and an SD of 6 Explain This Answer The default form for rnorm() is rnorm(n, mean, sd). If you need help remembering what each argument of a function does, look up the help documentation by running ?rnorm Question 3. If you have two packages that have functions with the same name and you want to specify exactly which package to use, what code would you use? package::function function::package library(package) install.packages(package) Explain This Answer You should use the form package::function, for example dplyr::select. Remember that when you first load your packages R will warn you if any functions have the same name - remember to look out for this! "],
["rm1-lab-1.html", "Chapter 2 RM1: Lab 1 2.1 Pre-class activities 2.2 In-class activities 2.3 Debugging tips", " Chapter 2 RM1: Lab 1 This is the first lab in which students will be introduced to R. The key aims of this lab are a) to introduce R as a tool that will support their open science practices such as scripting and replicability and b) to reduce any anxiety about using R by starting out with small, stepped-out activities that produce a tangible output where success is visible. 2.1 Pre-class activities There are nine activities in total for this pre-lab, but don’t worry, they are broken down in to very small steps! 2.1.1 Activity 1: Programming basics Please read Programming Basics and watch the two R videos available on Moodle. 2.1.2 Activity 2: Create the working directory If you want to load data into R, or save the ouput of what you’ve created (which you almost always will want to do), you first need to tell R where the working directory is. All this means is that we tell R where the files we need (such as raw data) are located and where we want to save any files you have created. Think of it just like when you have different subjects, and you have seperate folders for each topic e.g. biology, history and so on. When working with R, it’s useful to have all the data sets and files you need in one folder. We reccommend making a new folder called “Research Methods R Labs” with sub-folders for each lab and saving any data, scripts, and portfolio files for each lab in these folders. We suggest that you create this folder on the M: drive. This is your personal area on the University network that is safe and secure so it is much better than flashdrives or desktops. Figure 2.1: Lab folder structure First, choose a location for your lab work and then create the necessary folders for the first three R labs for RM1. 2.1.3 Activity 3: Set the working directory Once you have created your folders, open R Studio. To set the working directory click Session -&gt; Set Working Directory -&gt; Choose Directory and then select the RM1 Lab 1 folder as your working directory. Figure 2.2: Setting the working directory 2.1.4 R Markdown for R lab work and portfolio assignments For the R lab work and portfolio assignments you will use a worksheet format called R Markdown (abbreviated as Rmd) which is a great way to create dynamic documents with embedded chunks of code. These documents are self-contained and fully reproducible (if you have the necessary data, you should be able to run someone else’s analyses with the click of a button) which makes it very easy to share. This is an important part of your open science training as one of the reasons we are using RStudio is that it enables us to share open and reproducible information. Using these worksheets enables you to keep a record of all the code you write during the labs, and when it comes time for the portfolio assignments, we can give you a task you can and then fill in the required code. For more information about R Markdown feel free to have a look at their main webpage sometime http://rmarkdown.rstudio.com. The key advantage of R Markdown is that it allows you to write code into a document, along with regular text, and then knit it using the package knitr to create your document as either a webpage (HTML), a PDF, or Word document (.docx). 2.1.5 Activity 4: Open and save a new R Markdown document To open a new R Markdown document click the ‘new item’ icon and then click ‘R Markdown’. You will be prompted to give it a title, call it “RM1 Lab 1”. Also, change the author name to your GUID as this will be good practice for the portfolio assignments. Keep the output format as HTML. Figure 2.3: Opening a new R Markdown document Once you’ve opened a new document be sure to save it by clicking File -&gt; Save as. Name this file “Pre-lab 1”. If you’ve set the working directory correctly, you should now see this file appear in your file viewer pane. Figure 2.4: New file in working directory 2.1.6 Activity 5: Create a new code chunk When you first open a new R Markdown document you will see a bunch of welcome text that looks like this: Figure 2.5: New R Markdown text Do the following steps: * Delete everything below line 7 * On line 8 type “About me” * Click Insert -&gt; R Your Markdown document should now look something like this: Figure 2.6: New R chunk What you have created is a code chunk. In R Markdown, anything written in the white space is regarded as normal text, and anything written in a grey code chunk is assumed to be code. This makes it easy to combine both text and code in one document. When you create a new code chunk you should notice that the grey box starts and ends with three back ticks ```. One common mistake is to accidentally delete these back ticks. Remember, code chunks are grey and text entry is white - if the colour of certain parts of your Markdown doesn’t look right, check that you haven’t deleted the back ticks. 2.1.7 Activity 6: Write some code Now we’re going to use the code examples you read about in Programming Basics to add some simple code to our R Markdown dcoument. In your code chunk write the below code but replace the values of name/age/birthday with your own details). Note that text values and dates need to be contained in quotation marks but numerical values do not. Missing and/or unnecessary quotation marks are a common cause of code not working - remember this! name &lt;- &quot;Emily&quot; age &lt;- 33 today &lt;- Sys.Date() next_birthday &lt;- as.Date(&quot;2019-07-11&quot;) 2.1.8 Running code When you’re working in an R Markdown document, there are several ways to run your lines of code. First, you can highlight the code you want to run and then click Run -&gt; Run Selected Line(s), however this is very slow. Figure 2.7: Slow method of running code Alternatively, you can press the green “play” button at the top-right of the code chunk and this will run all lines of code in that chunk. Figure 2.8: Slightly better method of running code Even better though is to learn some of the keyboard shortcuts for RStudio. To run a single line of code, make sure that the cursor is in the line of code you want to run (it can be anywhere) and press ctrl + enter. If you want to run all of the code in the code chunk, press ctrl + shift + enter. Learn these shortcuts, they will make your life easier! 2.1.9 Activity 7: Run your code Run your code using one of the methods above. You should see the variables name, age, today, and next_birthday appear in the environment pane. 2.1.10 Activity 8: Inline code An incredibly useful feature of R Markdown is that R can insert values into your writing using inline code. If you’ve ever had to copy and paste a value or text from one file in to another, you’ll know how easy it can be to make mistakes. Inline code avoids this. It’s easier to show you what inline code does rather than to explain it so let’s have a go. First, copy and paste this text exactly (do not change anything) to the white space underneath your code chunk. My name is `r name` and I am `r age` years old. It is `r next_birthday - today` days until my birthday. 2.1.11 Activity 9: Knitting your file Nearly finished! As our final step we are going to “knit” our file. This simply means that we’re going to compile our code into a document that is more presentable. To do this click Knit -&gt; Knit to HMTL. R Markdown will create a new HTML document and it will automatically save this file in your working directory. As if by magic, that slightly odd bit of text you copied and pasted now appears as a normal sentence with the values pulled in from the objects you created. My name is Emily and I am 33 years old. It is 29 days until my birthday. We’re not going to use this function very often in the rest of the course but hopefully you can see just how useful this would be when writing up a report with lots of numbers! R Markdown is an incredibly powerful and flexible format - this book was written using it! If you want to push yourself with R, additional functions and features of R Markdown would be a good place to start. Before we finish, there are a few final things to note about knitting that will be useful for the portfolio and mini-project: R Markdown will only knit if your code works - this is a good way of checking for the portfolio assignments whether you’ve written legal code! You can choose to knit to a Word document rather than HTML. This can be useful for e.g., sharing with others, however, it may lose some functionality and it probably won’t look as good so we’d reccommend always knitting to HTML. You can choose to knit to PDF, however, this requires an LaTex installation and is quite complicated. If you don’t already know what LaTex is and how to use it, do not knit to PDF. If you do know how to use LaTex, you don’t need us to give you instructions! R will automatically open the knitted HTML file in the viewer, however, you can also navigate to the folder it is stored in and open the HTML file in your web browser (e.g., Chrome or Firefox). 2.1.12 Finished And you’re done! On your very first time using R you’ve not only written functioning code but you’ve written a reproducible output! You could send someone else your R Markdown document and they would be able to produce exactly the same HTML document as you, just by pressing knit. The key thing we want you to take away from this pre-lab is that R isn’t scary. It might be very new to a lot of you, but we’re going to take you through it step-by-step. You’ll be amazed at how quickly you can start producing professional-looking data visualisations and analysis. If you have any questions about anything contained in this pre-lab or in Programming Basics, you can use the Slack forum or ask your lab tutor. 2.2 In-class activities Part of becoming a psychologist is asking questions and gathering data to enable you to answer these questions effectively. It is very important that you understand all aspects of the research process such as experimental design, ethics, data management and visualisation. In this class, you will continue to develop reproducible scripts. This means scripts that completely and transparently perform an analysis from start to finish in a way that yields the same result for different people using the same software on different computers. And transparency is a key value of science, as embodied in the “trust but verify” motto. When you do things reproducibly, others can understand and check your work. This benefits science, but there is a selfish reason, too: the most important person who will benefit from a reproducible script is your future self. When you return to an analysis after two weeks of vacation, you will thank your earlier self for doing things in a transparent, reproducible way, as you can easily pick up right where you left off. The topic of open science is a big debate in the scientific community at the moment. Some classic psychological experiments have been found not to be replicable and part of the explanation for this has been a historical lack of transparency about data and analysis methods. If you’d like more information on this, you may find the following articles interesting: Study delivers bleak verdict on validity of psychology experiment results Low replicability in psychological science As part of your skill development, it is important that you work with data so that you can become confident and competent in your management and analysis of data. In the labs, we will work with real data that has been shared by other researchers. 2.2.1 Getting data ready to work with Today in the lab you will learn how to load the packages required to work with our data. You’ll then load the data into RStudio before getting it organised into a sensible format that relates to our research question. If you can’t remember what packages are, go back and revise Programming Basics. 2.2.2 Activity 1: Set-up Before we begin working with the data we need to do some set-up. If you need help with any of these steps, you should refer to the pre-lab activities: * Download the data files from Moodle into your Lab 1 folder. * Set the working directory to your Lab 1 folder. * Open a new R Markdown document and save it in your working directory. Call the file “In-class 1”. * Delete the default R Markdown welcome text and insert a new code chunk. * You can use the white space to take any notes that might help you for each activity. 2.2.3 Activity 2: Load in the package Today we need to use the tidyverse package. You will use this package in every single lab on this course as the functions it contains are those we use for data wrangling, descriptive statistics, and visualisation. To load the tidyverse type the following code into your code chunk and then run it. library(tidyverse) 2.2.4 Open data For the next few labs we are going to be using real data from the following paper: Woodworth, R.J., O’Brien-Malone, A., Diamond, M.R. and Schüz, B., 2018. Data from, ‘Web-based Positive Psychology Interventions: A Reexamination of Effectiveness’. Journal of Open Psychology Data, 6(1). We reccomend that you read through this paper and open up the .csv files in order to understand the data better but briefly, the files contains data from two scales, the Authentic Happiness Inventory (AHI) and the Center for Epidemiological Studies Depression (CES-D) scale, as well as demographic information about participants. 2.2.5 Activity 3: Read in data Now we can read in the data. To do this we will use the function read_csv() that allows us to read in .csv files. There are also functions that allow you to read in .xlsx files and other formats, however in this course we will only use .csv files. First, we will create an object called dat that contains the data in the ahi-cesd.csv file. Then, we will create an object called info that contains the data in the participant-info.csv. dat &lt;- read_csv (&quot;ahi-cesd.csv&quot;) pinfo &lt;- read_csv(&quot;participant-info.csv&quot;) There is also a function called read.csv(). Be very careful NOT to use this function instead of read_csv() as they have different ways of naming columns. For the portfolio tasks, unless your results match our exactly you will not get the marks which means you need to be careful to use the right functions. 2.2.6 Activity 4: Check yo’ data You should now see that the objects dat and pinfo have appeared in the environment pane. Whenever you read data into R you should always do an initial check to see that your data looks like you expected. There are several ways you can do this, try them all out to see how the results differ. In the environment pane, click on dat and pinfo. This will open the data to give you a spreadsheet-like view (although you can’t edit it like in Excel) In the environment pane, click the small blue play button to the left of dat and pinfo. This will show you the structure of the object information including the names of all the variables in that object and what type they are (also see str(pinfo)) Use summary(pinfo) Use head(pinfo) 2.2.7 Activity 5: Join the files together We have two files, dat and info but what we really want is a single file that has both the data and the demographic information about the participants. R makes this very easy by using the function inner_join(). Remember to use the help function ?inner_join if you want more information about how to use a function and to use tab auto-complete to help you write your code. The below code will create a new object all_dat that has the data from both dat and pinfo and it will use the columns id and intervention to match the participants’ data. Run this code and then view the new dataset using one of the methods from Activity 4. all_dat &lt;- inner_join(x = dat, # the first table you want to join y = pinfo, # the second table you want to join by = &#39;id&#39;, &#39;intervention&#39;) # columns the two tables have in common 2.2.8 Activity 6: Pull out variables of interest Our final step is to pull our variables of interest. Very frequently, datasets will have more variables and data than you actually want to use and it can make life easier to create a new object with just the data you need. In this case, the file contains the responses to each individual question on boh the AHI scale and the CESD scale as well as the total score (i.e., the sum of all the individual responses). For our analysis, all we care about is the total scores, as well as the demographic information about participants. To do this we use the select() function to create a new object named summarydata. summarydata &lt;- select(.data = all_dat, # name of the object to take data from ahiTotal, cesdTotal, sex, age, educ, income, occasion,elapsed.days) # all the columns you want to keep Run this code and then run head(summarydata). If everything has gone to plan it should look something like this: ahiTotal cesdTotal sex age educ income occasion elapsed.days 32 50 1 46 4 3 5 182.025 34 49 1 37 3 2 2 14.192 34 47 1 37 3 2 3 33.034 35 41 1 19 2 1 0 0.000 36 36 1 40 5 2 5 202.097 37 35 1 49 4 1 0 0.000 Finally, try knitting the file to HTML. And that’s it, well done! Remember to save your Markdown in your Lab folders and make a note of any mistakes you made and how you fixed them. You have started on your journey to become a confident and competent member of the open scientific community! There is no portfolio assessment this week, instead, use the time to get comfortable with what we’ve covered already and revise the activities and support materials presented so far if needed. If you’re feeling comfortable with R, you can work your way through this book at your own pace or push yourself by using the additional resources highlighted in Programming Basics. 2.3 Debugging tips When you downloaded the files from Moodle did you save the file names exactly as they were originally? If you download the file more than once you will find your computer may automatically add a number to the end of the filename. data.csv is not the same as data(1).csv. Pay close attention to names! Have you used the exact same object names as we did in each activity? Remember, name is different to Name. In order to make sure you can follow along with this book, pay special attention to ensuring you use the same object names as we do. Have you used quotation marks where needed? Have you accidentally deleted any backticks (```) from the beginning or end of code chunks? "]
]
